// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvaluestore.proto

#include "keyvaluestore.pb.h"
#include "keyvaluestore.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace keyvaluestore {

static const char* KeyValueStore_method_names[] = {
  "/keyvaluestore.KeyValueStore/init",
  "/keyvaluestore.KeyValueStore/shutdown",
  "/keyvaluestore.KeyValueStore/get",
  "/keyvaluestore.KeyValueStore/put",
};

std::unique_ptr< KeyValueStore::Stub> KeyValueStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyValueStore::Stub> stub(new KeyValueStore::Stub(channel, options));
  return stub;
}

KeyValueStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_(KeyValueStore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_shutdown_(KeyValueStore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_(KeyValueStore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_put_(KeyValueStore_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeyValueStore::Stub::init(::grpc::ClientContext* context, const ::keyvaluestore::InitRequest& request, ::keyvaluestore::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::InitRequest, ::keyvaluestore::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void KeyValueStore::Stub::async::init(::grpc::ClientContext* context, const ::keyvaluestore::InitRequest* request, ::keyvaluestore::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::InitRequest, ::keyvaluestore::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::init(::grpc::ClientContext* context, const ::keyvaluestore::InitRequest* request, ::keyvaluestore::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::InitResponse>* KeyValueStore::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::keyvaluestore::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::InitResponse, ::keyvaluestore::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::InitResponse>* KeyValueStore::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::keyvaluestore::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KeyValueStore::Stub::shutdown(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::keyvaluestore::ShutdownResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::keyvaluestore::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_shutdown_, context, request, response);
}

void KeyValueStore::Stub::async::shutdown(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::keyvaluestore::ShutdownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::keyvaluestore::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::shutdown(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::keyvaluestore::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::ShutdownResponse>* KeyValueStore::Stub::PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::ShutdownResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::ShutdownResponse>* KeyValueStore::Stub::AsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KeyValueStore::Stub::get(::grpc::ClientContext* context, const ::keyvaluestore::GetRequest& request, ::keyvaluestore::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::GetRequest, ::keyvaluestore::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_, context, request, response);
}

void KeyValueStore::Stub::async::get(::grpc::ClientContext* context, const ::keyvaluestore::GetRequest* request, ::keyvaluestore::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::GetRequest, ::keyvaluestore::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::get(::grpc::ClientContext* context, const ::keyvaluestore::GetRequest* request, ::keyvaluestore::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::GetResponse>* KeyValueStore::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::keyvaluestore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::GetResponse, ::keyvaluestore::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::GetResponse>* KeyValueStore::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::keyvaluestore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KeyValueStore::Stub::put(::grpc::ClientContext* context, const ::keyvaluestore::PutRequest& request, ::keyvaluestore::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::keyvaluestore::PutRequest, ::keyvaluestore::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_put_, context, request, response);
}

void KeyValueStore::Stub::async::put(::grpc::ClientContext* context, const ::keyvaluestore::PutRequest* request, ::keyvaluestore::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::keyvaluestore::PutRequest, ::keyvaluestore::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

void KeyValueStore::Stub::async::put(::grpc::ClientContext* context, const ::keyvaluestore::PutRequest* request, ::keyvaluestore::PutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::PutResponse>* KeyValueStore::Stub::PrepareAsyncputRaw(::grpc::ClientContext* context, const ::keyvaluestore::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::keyvaluestore::PutResponse, ::keyvaluestore::PutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::keyvaluestore::PutResponse>* KeyValueStore::Stub::AsyncputRaw(::grpc::ClientContext* context, const ::keyvaluestore::PutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncputRaw(context, request, cq);
  result->StartCall();
  return result;
}

KeyValueStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::keyvaluestore::InitRequest, ::keyvaluestore::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::InitRequest* req,
             ::keyvaluestore::InitResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::google::protobuf::Empty, ::keyvaluestore::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::keyvaluestore::ShutdownResponse* resp) {
               return service->shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::keyvaluestore::GetRequest, ::keyvaluestore::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::GetRequest* req,
             ::keyvaluestore::GetResponse* resp) {
               return service->get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyValueStore::Service, ::keyvaluestore::PutRequest, ::keyvaluestore::PutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::keyvaluestore::PutRequest* req,
             ::keyvaluestore::PutResponse* resp) {
               return service->put(ctx, req, resp);
             }, this)));
}

KeyValueStore::Service::~Service() {
}

::grpc::Status KeyValueStore::Service::init(::grpc::ServerContext* context, const ::keyvaluestore::InitRequest* request, ::keyvaluestore::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::shutdown(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::keyvaluestore::ShutdownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::get(::grpc::ServerContext* context, const ::keyvaluestore::GetRequest* request, ::keyvaluestore::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::put(::grpc::ServerContext* context, const ::keyvaluestore::PutRequest* request, ::keyvaluestore::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace keyvaluestore

