syntax = "proto3";

package keyvaluestore;

service KeyValueStore {
    rpc ManageSession(stream ClientRequest) returns (stream ServerResponse);

    // Raft RPCs for leader election, log replication, and heartbeats
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

message ClientRequest {
    oneof request {
        InitRequest init_request = 1;
        GetRequest get_request = 2;
        PutRequest put_request = 3;
        ShutdownRequest shutdown_request = 4;
    }
}

message ServerResponse {
    oneof response {
        InitResponse init_response = 1;
        GetResponse get_response = 2;
        PutResponse put_response = 3;
        ShutdownResponse shutdown_response = 4;
    }
}

message InitRequest {
    string server_name = 1;
}

message InitResponse {
    bool success = 1;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    string value = 1;
    bool key_found = 2;
}

message PutRequest {
    string key = 1;
    string value = 2;
}

message PutResponse {
    string old_value = 1;
    bool key_found = 2;
}

message ShutdownRequest {}

message ShutdownResponse {
    bool success = 1;
}

// Raft RPC messages for leader election
message RequestVoteRequest {
    int64 term = 1;                   // The candidate's current term
    int64 candidate_id = 2;           // The candidate's ID
    int64 last_log_index = 3;         // The index of the candidate's last log entry
    int64 last_log_term = 4;          // The term of the candidate's last log entry
}

message RequestVoteResponse {
    int64 term = 1;                   // The current term of the server that responded
    bool vote_granted = 2;            // True if the candidate received the vote
}

// Raft RPC messages for log replication and leader heartbeats
message AppendEntriesRequest {
    int64 term = 1;                   // The leader's current term
    int64 leader_id = 2;              // The leader's ID
    int64 prev_log_index = 3;         // The index of the log entry immediately preceding new ones
    int64 prev_log_term = 4;          // The term of the prev_log_index entry
    repeated LogEntry entries = 5;    // Log entries to store (empty for heartbeat)
    int64 leader_commit = 6;          // The leader's commit index
}

message AppendEntriesResponse {
    int64 term = 1;                   // The current term of the server that responded
    bool success = 2;                 // True if follower contained entry matching prev_log_index and prev_log_term
}

// Heartbeat messages for Raft leader to maintain control
message HeartbeatRequest {
    int64 term = 1;                   // The leader's current term
    int64 leader_id = 2;              // The leader's ID
}

message HeartbeatResponse {
    int64 term = 1;                   // The current term of the follower
    bool success = 2;                 // True if the heartbeat was accepted
}

// Log entries for Raft log replication
message LogEntry {
    int64 term = 1;                   // Term when entry was received by the leader
    string key = 2;                   // Key associated with the log entry
    string value = 3;                 // Value associated with the log entry
}

