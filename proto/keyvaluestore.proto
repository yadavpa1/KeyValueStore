syntax = "proto3";

package keyvaluestore;

service Raft {
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

service KeyValueStore {
    rpc Init(InitRequest) returns (InitResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc Put(PutRequest) returns (PutResponse);
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
    rpc Die(DieRequest) returns (DieResponse);
}

service HashRing {
    rpc Gossip(GossipRequest) returns (GossipResponse);
}

// rpc KeyTransfer(KeyTransferRequest) returns (KeyTransferResponse);

message InitRequest {
    string server_name = 1;
}

message InitResponse {
    bool success = 1;
    string leader_server = 2;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    string value = 1;
    bool key_found = 2;
    string leader_server = 3;
}

message PutRequest {
    string key = 1;
    string value = 2;
}

message PutResponse {
    string old_value = 1;
    bool key_found = 2;
    string leader_server = 3;
}

message ShutdownRequest {}

message ShutdownResponse {
    bool success = 1;
}

message DieRequest {
    string server_name = 1;  // The server name in "host:port" format
    bool clean = 2;          // 1 for clean shutdown, 0 for immediate exit
}

message DieResponse {
    bool success = 1;        // True if the server successfully initiated termination
}


message RequestVoteRequest {
    int64 term = 1;                   // The candidate's current term
    int64 candidate_id = 2;           // The candidate's ID
    int64 last_log_index = 3;         // The index of the candidate's last log entry
    int64 last_log_term = 4;          // The term of the candidate's last log entry
}

message RequestVoteResponse {
    int64 term = 1;                   // The current term of the server that responded
    bool vote_granted = 2;            // True if the candidate received the vote
}

// Raft RPC messages for log replication and leader heartbeats
message AppendEntriesRequest {
    int64 term = 1;                   // The leader's current term
    int64 leader_id = 2;              // The leader's ID
    int64 prev_log_index = 3;         // The index of the log entry immediately preceding new ones
    int64 prev_log_term = 4;          // The term of the prev_log_index entry
    repeated LogEntry entries = 5;    // Log entries to store (empty for heartbeat)
    int64 leader_commit = 6;          // The leader's commit index
}

message AppendEntriesResponse {
    int64 term = 1;                   // The current term of the server that responded
    bool success = 2;                 // True if follower contained entry matching prev_log_index and prev_log_term
}

// Log entries for Raft log replication
message LogEntry {
    int64 term = 1;                   // Term when entry was received by the leader
    string key = 2;                   // Key associated with the log entry
    string value = 3;                 // Value associated with the log entry
}

message GossipRequest {
    repeated string host_list = 1;    // List of current nodes in the RAFT group
    string current_leader = 2;        // Current leader of the RAFT group
}

message GossipResponse {
    bool success = 1;                 // Indicates if the gossip exchange was successful
    string current_leader = 2;        // Leader in the responding group
}

message KeyTransferRequest {
    repeated KeyValuePair key_values = 2; // List of key-value pairs to be transferred
}

message KeyTransferResponse {
    bool success = 1;                     // Indicates if the key-value transfer successful
}

message KeyValuePair {
    string key = 1;                      // Key being transferred
    string value = 2;                    // Value associated with the key
}